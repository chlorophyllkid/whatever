/* eslint import/no-extraneous-dependencies: ["error", {"devDependencies": true}] */

const path = require('path');
const fs = require('fs');
const glob = require('glob');
const log = require('../utils/log');

const srcFolder = 'src';

function dashCaseToCamelCase(str) {
  return str.replace(/(-\w)/g, m => m[1].toUpperCase());
}

function buildSCSS(module, fontSets, fontPrefix) {
  let generatedVariables = '// Attention: this file was generated by tasks/build/icon.js\n\n';
  let generatedClasses = '// Attention: this file was generated by tasks/build/icon.js\n\n';

  fontSets.forEach((fontSet) => {
    const { selection } = fontSet;

    selection.forEach((icon) => {
      generatedVariables += `$${fontPrefix}${icon.name}: \\${icon.code.toString(16)};\n`;

      generatedClasses += `.${fontPrefix}${icon.name} {\n`;
      generatedClasses += `  @include create-icon-before($${fontPrefix}${icon.name});\n`;
      generatedClasses += '}\n';
      generatedClasses += '\n';
    });
  });

  const variablesPath = module.replace('.font.json', '_generated-variables.scss');
  const classesPath = module.replace('.font.json', '_generated-classes.scss');

  fs.writeFileSync(variablesPath, generatedVariables);
  fs.writeFileSync(classesPath, generatedClasses);
}

function buildPUG(module, fontSets, fontPrefix) {
  const file = path.parse(module);
  const fontName = file.name.replace('.font', '');
  const moduleName = dashCaseToCamelCase(fontName);

  let generatedText = '//- Attention: this file was generated by tasks/build/icon.js\n\n';
  generatedText += `mixin ${moduleName}Overview()\n`;
  generatedText += '  .sg-iconOverview\n';

  fontSets.forEach((fontSet) => {
    const { selection } = fontSet;

    selection.forEach((icon) => {
      generatedText += '    .sg-iconOverview_tile\n';
      generatedText += `      .${fontPrefix}${icon.name}\n`;
      generatedText += `      span ${fontPrefix}${icon.name}\n`;
      generatedText += '\n';
    });
  });

  const targetPath = module.replace('.font.json', '_generated-overview.pug');
  fs.writeFileSync(targetPath, generatedText);
}

function build(module) {
  try {
    const json = JSON.parse(fs.readFileSync(module, 'utf8'));
    const fontSets = json.iconSets;
    const fontPrefix = json.preferences.fontPref.prefix;

    buildSCSS(module, fontSets, fontPrefix);
    buildPUG(module, fontSets, fontPrefix);
  } catch (error) {
    log.error('font', error);
  }
}

function rebuild(event, module) {
  if (event === 'remove') {
    log.fileChange('font', 'remove', module);

    const pugFile = module.replace('.font.json', '_generated-overview.pug');
    if (fs.existsSync(pugFile)) {
      log.fileChange('font', 'remove', pugFile);
      fs.unlinkSync(pugFile);
    }
    const scssVariablesFile = module.replace('.font.json', '_generated-variables.scss');
    if (fs.existsSync(scssVariablesFile)) {
      log.fileChange('font', 'remove', scssVariablesFile);
      fs.unlinkSync(scssVariablesFile);
    }
    const scssClassFile = module.replace('.font.json', '_generated-classes.scss');
    if (fs.existsSync(scssClassFile)) {
      log.fileChange('font', 'remove', scssClassFile);
      fs.unlinkSync(scssClassFile);
    }
  } else {
    log.fileChange('font', 'build', module);
    build(module);
  }
}

async function run() {
  await new Promise((fontResolve) => {
    glob(`${srcFolder}/**/*font.json`, async (error, files) => {
      if (error) {
        log.error('font', error);
      } else {
        const modules = files;
        await Promise.all(modules.map(module => build(module)));

        fontResolve();
      }
    });
  });
}

if (require.main === module) run();

exports.rebuild = rebuild;
exports.run = run;
