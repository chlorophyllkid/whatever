/* eslint import/no-extraneous-dependencies: ["error", {"devDependencies": true}] */

const fs = require('fs');
const { performance } = require('perf_hooks');
const glob = require('glob');
const log = require('../utils/log');

const srcFolder = 'src';

function buildSCSS(module, colorGroups) {
  let generatedText = '// Attention: this file was generated by tasks/build/color.js\n\n';

  colorGroups.forEach((group) => {
    group.colors.forEach((color) => {
      generatedText += `// ${color.name}\n`;

      const { variables } = color;
      variables.forEach((variable) => {
        generatedText += `$${variable}: #${color.hex_code};\n`;
      });

      generatedText += '\n';
    });
  });

  const targetPath = module.replace('.json', '_generated-variables.scss');
  fs.writeFileSync(targetPath, generatedText);
}

function buildPUG(module, colorGroups) {
  let generatedText = '//- Attention: this file was generated by tasks/build/color.js\n\n';
  generatedText += 'mixin colorOverview()\n';

  colorGroups.forEach((group) => {
    if (group.name && group.name !== '') {
      generatedText += `  h2 ${group.name}\n`;
    }
    generatedText += '  .sg-colorOverview\n';

    group.colors.forEach((color) => {
      generatedText += '    .sg-color\n';
      generatedText += `      .sg-color_preview(style="background: #${color.hex_code}")\n`;
      generatedText += '      .sg-color_description\n';
      generatedText += '        .sg-color_name\n';
      generatedText += `          small ${color.name}\n`;
      generatedText += '        .sg-color_codes\n';
      generatedText += `          small #${color.hex_code}\n`;
      generatedText += `          small RGB ${color.rgb_code}\n\n`;
    });
  });

  const targetPath = module.replace('.json', '_generated-overview.pug');
  fs.writeFileSync(targetPath, generatedText);
}

function build(module) {
  try {
    const json = JSON.parse(fs.readFileSync(module, 'utf8'));
    const { colorGroups } = json;

    buildSCSS(module, colorGroups);
    buildPUG(module, colorGroups);
  } catch (error) {
    log.error('color', error);
  }
}

function rebuild(event, module) {
  if (event === 'remove') {
    log.fileChange('color', 'remove', module);

    const pugFile = module.replace('.json', '_generated.pug');
    if (fs.existsSync(pugFile)) {
      log.fileChange('color', 'remove', pugFile);
      fs.unlinkSync(pugFile);
    }
    const scssFile = module.replace('.json', '_generated.scss');
    if (fs.existsSync(scssFile)) {
      log.fileChange('color', 'remove', scssFile);
      fs.unlinkSync(scssFile);
    }
  } else {
    log.fileChange('color', 'build', module);
    build(module);
  }
}

async function run() {
  const startTime = performance.now();
  log.start('color');

  await new Promise((colorResolve) => {
    glob(`${srcFolder}/**/*colors.json`, async (error, files) => {
      if (error) {
        log.error('color', error);
      } else {
        const modules = files;
        await Promise.all(modules.map(module => build(module)));

        colorResolve();
      }
    });
  });

  const time = performance.now() - startTime;
  log.finish('color', time);
}

if (require.main === module) run();

exports.rebuild = rebuild;
exports.run = run;
